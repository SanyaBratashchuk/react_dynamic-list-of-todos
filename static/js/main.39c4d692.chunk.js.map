{"version":3,"sources":["components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","api.ts","App.tsx","helpers/wrappers.ts","index.tsx"],"names":["TodoList","React","memo","todos","selectUser","selectedUser","changeQuery","changeSelectedStatus","randomizeTodos","className","type","placeholder","onChange","event","target","value","onClick","map","id","title","completed","userId","classNames","checked","readOnly","CurrentUser","clearUser","useState","user","setUser","useEffect","fetch","then","response","json","getUser","loadedUser","name","email","phone","App","setTodos","selectedUserId","setSelectedUserId","appliedQuery","setAppliedQuery","selectedStatus","setSelectedStatus","loadedTodos","applyQuery","useCallback","f","delay","timerId","clearTimeout","args","setTimeout","debounce","filtredTodos","filter","todo","toLowerCase","startsWith","shuffled","i","length","currTodo","randomIndex","Math","floor","random","ReactDOM","render","document","getElementById"],"mappings":"0UASaA,EAAWC,IAAMC,MAC5B,YAOO,IANLC,EAMI,EANJA,MACAC,EAKI,EALJA,WACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,qBACAC,EACI,EADJA,eAEA,OACE,sBAAKC,UAAU,WAAf,UACE,wCACA,sBAAKA,UAAU,oBAAf,UACE,uBACEA,UAAU,mBACVC,KAAK,OACLC,YAAY,SACZC,SAAU,SAAAC,GACRP,EAAYO,EAAMC,OAAOC,UAG7B,yBAAQN,UAAU,mBAAmBG,SAAUL,EAA/C,UACE,wBAAQQ,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,0BAEF,wBACEL,KAAK,SACLD,UAAU,SACVO,QAASR,EAHX,0BAQF,qBAAKC,UAAU,2BAAf,SACE,oBAAIA,UAAU,iBAAd,SACGN,EAAMc,KAAI,gBACTC,EADS,EACTA,GACAC,EAFS,EAETA,MACAC,EAHS,EAGTA,UACAC,EAJS,EAITA,OAJS,OAMT,qBAEEZ,UAAWa,IAAW,iBAAkB,CACtC,0BAA2BF,EAC3B,6BAA8BA,IAJlC,UAOE,kCACE,uBAAOV,KAAK,WAAWa,QAASH,EAAWI,UAAQ,IACnD,4BAAIL,OAGN,yBACEV,UAAWa,IAAW,wBAAyB,SAAU,CACvD,kCAAmCD,IAAWhB,IAEhDK,KAAK,SACLM,QAAS,WACPZ,EAAWiB,IANf,qBAUGA,OArBEH,gBC/CRO,G,MAA+B,SAAC,GAA2B,IAAzBJ,EAAwB,EAAxBA,OAAQK,EAAgB,EAAhBA,UACrD,EAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KAMA,OAJAC,qBAAU,YCEW,SAACT,GACtB,OAAOU,MAAM,GAAD,OARG,4CAQH,OAAeV,IAAUW,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WDF7DC,CAAQd,GAAQW,MAAK,SAAAI,GAAU,OAAIP,EAAQO,QAC1C,CAACf,IAGF,sBAAKZ,UAAU,cAAf,UACE,oBAAIA,UAAU,qBAAd,SACE,yDAEGmB,QAFH,IAEGA,OAFH,EAEGA,EAAMV,QAIX,oBAAIT,UAAU,oBAAd,gBAAmCmB,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMS,OACzC,mBAAG5B,UAAU,qBAAb,gBAAmCmB,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMU,QACzC,mBAAG7B,UAAU,qBAAb,gBAAmCmB,QAAnC,IAAmCA,OAAnC,EAAmCA,EAAMW,QAEzC,wBACE9B,UAAU,4BACVC,KAAK,SACLM,QAAS,WACPU,KAJJ,wBEiESc,EAhFO,WACpB,MAA0Bb,mBAAiB,IAA3C,mBAAOxB,EAAP,KAAcsC,EAAd,KACA,EAA4Cd,mBAAS,GAArD,mBAAOe,EAAP,KAAuBC,EAAvB,KACA,EAAwChB,mBAAS,IAAjD,mBAAOiB,EAAP,KAAqBC,EAArB,KACA,EAA4ClB,mBAAS,OAArD,mBAAOmB,EAAP,KAAuBC,EAAvB,KAEAjB,qBAAU,WDVHC,MAJQ,2CAKZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCUhBF,MAAK,SAAAgB,GAAW,OAAIP,EAASO,QACvC,IAEH,IAIMC,EAAaC,sBCtBG,SAACC,EAAYC,GACnC,IAAIC,EAEJ,OAAO,WACLC,aAAaD,GADW,2BAAfE,EAAe,yBAAfA,EAAe,gBAExBF,EAAUG,WAAU,WAAV,GAAWL,EAAGC,GAAd,OAAwBG,KDkBlCE,CAASZ,EAAiB,KAC1B,IAsCIa,EA1BGvD,EAAMwD,QAAO,SAAAC,GAClB,OAAQd,GACN,IAAK,YACH,OAAOc,EAAKzC,MAAM0C,cAAcC,WAAWlB,IAAiBgB,EAAKxC,UACnE,IAAK,SACH,OAAOwC,EAAKzC,MAAM0C,cAAcC,WAAWlB,KAAkBgB,EAAKxC,UACpE,QACE,OAAOwC,EAAKzC,MAAM0C,cAAcC,WAAWlB,OAqBnD,OACE,sBAAKnC,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEN,MAAOuD,EACPtD,WA1CW,SAACiB,GAClBsB,EAAkBtB,IA0CZhB,aAAcqC,EACdpC,YAAa2C,EACb1C,qBAtDc,SAACM,GACrBkC,EAAkBlC,EAAMC,OAAOC,QAsDzBP,eAzBa,WAGnB,IAFA,IAAMuD,EAAQ,YAAO5D,GAEZ6D,EAAID,EAASE,OAAS,EAAGD,EAAI,EAAGA,IAAK,CAC5C,IAAME,EAAWH,EAASC,GACpBG,EAAcC,KAAKC,MAAMD,KAAKE,UAAYN,EAAI,IAEpDD,EAASC,GAAKD,EAASI,GACvBJ,EAASI,GAAeD,EAG1BzB,EAASsB,QAkBP,qBAAKtD,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACGiC,EACC,cAAC,EAAD,CAAarB,OAAQqB,EAAgBhB,UAjDjC,WACZiB,EAAkB,MAiDR,2BEhFd4B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.39c4d692.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/control-has-associated-label */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types';\nimport './TodoList.scss';\n\nexport const TodoList = React.memo<Props>(\n  ({\n    todos,\n    selectUser,\n    selectedUser,\n    changeQuery,\n    changeSelectedStatus,\n    randomizeTodos,\n  }) => {\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__control\">\n          <input\n            className=\"TodoList__search\"\n            type=\"text\"\n            placeholder=\"search\"\n            onChange={event => {\n              changeQuery(event.target.value);\n            }}\n          />\n          <select className=\"TodoList__select\" onChange={changeSelectedStatus}>\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n          <button\n            type=\"button\"\n            className=\"button\"\n            onClick={randomizeTodos}\n          >\n            Randomize\n          </button>\n        </div>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos.map(({\n              id,\n              title,\n              completed,\n              userId,\n            }) => (\n              <li\n                key={id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--checked': completed,\n                  'TodoList__item--unchecked': !completed,\n                })}\n              >\n                <label>\n                  <input type=\"checkbox\" checked={completed} readOnly />\n                  <p>{title}</p>\n                </label>\n\n                <button\n                  className={classNames('TodoList__user-button', 'button', {\n                    'TodoList__user-button--selected': userId === selectedUser,\n                  })}\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(userId);\n                  }}\n                >\n                  User&nbsp;\n                  {userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  },\n\n);\n\ninterface Props {\n  todos: Todo[],\n  selectUser: (userId: number) => void,\n  selectedUser: number,\n  changeQuery: (...args: any[]) => void,\n  changeSelectedStatus: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  randomizeTodos: () => void,\n}\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { User } from '../../types';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUser }) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getUser(userId).then(loadedUser => setUser(loadedUser));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          Selected user:\n          {user?.id}\n        </span>\n      </h2>\n\n      <h3 className=\"CurrentUser__name\">{user?.name}</h3>\n      <p className=\"CurrentUser__email\">{user?.email}</p>\n      <p className=\"CurrentUser__phone\">{user?.phone}</p>\n\n      <button\n        className=\"button CurrentUser__clear\"\n        type=\"button\"\n        onClick={() => {\n          clearUser();\n        }}\n      >\n        Clear\n      </button>\n    </div>\n  );\n};\n\ninterface Props {\n  userId:number,\n  clearUser: () => void,\n}\n","import { Todo, User } from './types';\n\nconst todosUrl = 'https://mate.academy/students-api/todos';\nconst UsersUrl = 'https://mate.academy/students-api/users/';\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return fetch(todosUrl)\n    .then(response => response.json());\n};\n\nexport const getUser = (userId:number): Promise<User> => {\n  return fetch(`${UsersUrl}${userId}`).then(response => response.json());\n};\n","/* eslint-disable no-plusplus */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\nimport { Todo } from './types';\nimport { debounce } from './helpers/wrappers';\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [appliedQuery, setAppliedQuery] = useState('');\n  const [selectedStatus, setSelectedStatus] = useState('all');\n\n  useEffect(() => {\n    getTodos().then(loadedTodos => setTodos(loadedTodos));\n  }, []);\n\n  const selectHandler = (event:React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedStatus(event.target.value);\n  };\n\n  const applyQuery = useCallback(\n    debounce(setAppliedQuery, 1000),\n    [],\n  );\n\n  const selectUser = (userId:number) => {\n    setSelectedUserId(userId);\n  };\n\n  const clear = () => {\n    setSelectedUserId(0);\n  };\n\n  const getFiltredTodos = () => {\n    return todos.filter(todo => {\n      switch (selectedStatus) {\n        case 'completed':\n          return todo.title.toLowerCase().startsWith(appliedQuery) && todo.completed;\n        case 'active':\n          return todo.title.toLowerCase().startsWith(appliedQuery) && !todo.completed;\n        default:\n          return todo.title.toLowerCase().startsWith(appliedQuery);\n      }\n    });\n  };\n\n  const shuffleTodos = () => {\n    const shuffled = [...todos];\n\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const currTodo = shuffled[i];\n      const randomIndex = Math.floor(Math.random() * (i + 1));\n\n      shuffled[i] = shuffled[randomIndex];\n      shuffled[randomIndex] = currTodo;\n    }\n\n    setTodos(shuffled);\n  };\n\n  const filtredTodos = getFiltredTodos();\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={filtredTodos}\n          selectUser={selectUser}\n          selectedUser={selectedUserId}\n          changeQuery={applyQuery}\n          changeSelectedStatus={selectHandler}\n          randomizeTodos={shuffleTodos}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser userId={selectedUserId} clearUser={clear} />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const debounce = (f:Function, delay:number) => {\n  let timerId: number;\n\n  return (...args:any[]) => {\n    clearTimeout(timerId);\n    timerId = setTimeout(f, delay, ...args);\n  };\n};\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}